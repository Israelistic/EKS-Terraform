aws eks update-kubeconfig --region ca-central-1 --name Haggai-Lerman-DEV-EKS-CanadaClouds
kubectl get nodes
kubectl get nodes -o wide
kubectl get svc -o wide

# Connect to Bastion EC2 Instance
ssh -i private-key/eks-terraform-key.pem ec2-user@<Bastion-EC2-Instance-Public-IP>
cd /tmp

# Connect to Kubernetes Worker Nodes - Public Node Group
ssh -i private-key/eks-terraform-key.pem ec2-user@<Public-NodeGroup-EC2Instance-PublicIP> 
[or]
ec2-user@<Public-NodeGroup-EC2Instance-PrivateIP>

# Connect to Kubernetes Worker Nodes - Private Node Group from Bastion Host
ssh -i eks-terraform-key.pem ec2-user@<Private-NodeGroup-EC2Instance-PrivateIP>


# Verify if kubelet and kube-proxy running
ssh -i ~/.ssh/eks-terraform-key ec2-user@<bastion_host>


##### REPEAT BELOW STEPS ON BOTH PUBLIC AND PRIVATE NODE GROUPS ####

ps -ef | grep kube

# Verify kubelet-config.json
cat /etc/kubernetes/kubelet/kubelet-config.json

# Verify kubelet kubeconfig
cat /var/lib/kubelet/kubeconfig


# Verify clusters.cluster.server value(EKS Cluster API Server Endpoint)  DNS resolution which is taken from kubeconfig
nslookup <EKS Cluster API Server Endpoint>

# Verify clusters.cluster.server value(EKS Cluster API Server Endpoint)   with wget 
Try with wget on Node Group EC2 Instances (both public and private)
wget <Kubernetes API Server Endpoint>
Observation:
1. This Pod Infra container will be downloaded from AWS Elastic Container Registry ECR
2. All the EKS related system pods also will be downloaded from AWS ECR only


# Verify Namespaces and Resources in Namespaces
kubectl get namespaces
kubectl get ns 
Observation: 4 namespaces will be listed by default
1. kube-node-lease
2. kube-public
3. default
4. kube-system


# Verify Resources in kube-node-lease namespace
kubectl get all -n kube-node-lease

# Verify Resources in kube-public namespace
kubectl get all -n kube-public

# Verify Resources in default namespace
kubectl get all -n default
Observation: 
1. Kubernetes Service: Cluster IP Service for Kubernetes Endpoint

# Verify Resources in kube-system namespace
kubectl get all -n kube-system
Observation: 
1. Kubernetes Deployment: coredns
2. Kubernetes DaemonSet: aws-node, kube-proxy
3. Kubernetes Service: kube-dns
4. Kubernetes Pods: coredns, aws-


# Verify System pods in kube-system namespace
kubectl get pods # Nothing in default namespace
kubectl get pods -n kube-system
kubectl get pods -n kube-system -o wide

# Verify Daemon Sets in kube-system namespace
kubectl get ds -n kube-system
Observation: The below two daemonsets will be running
1. aws-node
2. kube-proxy

# Describe aws-node Daemon Set
kubectl describe ds aws-node -n kube-system
Observation: 
1. Reference "Image" value it will be the ECR Registry URL 

# Describe kube-proxy Daemon Set
kubectl describe ds kube-proxy -n kube-system
1. Reference "Image" value it will be the ECR Registry URL 

# Describe coredns Deployment
kubectl describe deploy coredns -n kube-system



# Create  a Pod
kubectl run <desired-pod-name> --image <Container-Image> --generator=run-pod/v1
kubectl run my-nginx --image my-nginx

### List Pods
- Get the list of pods

# List Pods
kubectl get pods

# Alias name for pods is po
kubectl get po


### List Pods with wide option
- List pods with wide option which also provide Node information on which Pod is running

kubectl get pods -o wide


### Describe Pod
- Describe the POD, primarily required during troubleshooting. 
- Events shown will be of a great help during troubleshooting. 

# To get list of pod names
kubectl get pods

# Describe the Pod
kubectl describe pod <Pod-Name>
kubectl describe pod my-nginx


### Access Application
- Currently we can access this application only inside worker nodes. 
- To access it externally, we need to create a **NodePort Service**. 
- **Services** is one very very important concept in Kubernetes. 


### Delete Pod

# To get list of pod names
kubectl get pods

# Delete Pod
kubectl delete pod <Pod-Name>
kubectl delete pod my-nginx

- Expose pod with a service (NodePort Service) to access the application externally (from internet)
- **Ports**
- **port:** Port on which node port service listens in Kubernetes cluster internally
- **targetPort:** We define container port here on which our application is running.
- **NodePort:** Worker Node port on which we can access our application.

# Expose Pod as a Service
kubectl expose pod my-nginx  --type=NodePort --port=80 --name=my-nginx-svc


# Get Service Info
kubectl get service
kubectl get svc

# Get Public IP of Worker Nodes
kubectl get nodes -o wide


#- **Access the Application using Public IP**

http://<node1-public-ip>:<Node-Port>

NOTE: you have to allow inboud traffic on Security-group= sg-*-eks-remoteAccess-*-*-* from you EKS service on AWS console



- **Important Note about: target-port**
  -  If target-port is not defined, by default and for convenience, the **targetPort** is set to the same value as the **port** field.

# Below command will fail when accessing the application, as service port (81) and container port (80) are different
kubectl expose pod my-nginx  --type=NodePort --port=81 --name=my-nginx-svc2

# Expose Pod as a Service with Container Port (--taret-port)
kubectl expose pod my-nginx --type=NodePort --port=81 --target-port=80 --name=my-nginx


# Get Pod Name
kubectl get po

# Dump Pod logs
kubectl logs <pod-name>
kubectl logs my-nginx

# Stream pod logs with -f option and access application to see logs
kubectl logs <pod-name>
kubectl logs -f my-nginx

- **Important Notes**
  - Refer below link and search for **Interacting with running Pods** for additional log options
  - Troubleshooting skills are very important. So please go through all logging options available and master them.
  - **Reference:** https://kubernetes.io/docs/reference/kubectl/cheatsheet/


### Connect to Container in a POD

- **Connect to a Container in POD and execute commands**

# Connect to Nginx Container in a POD
kubectl exec -it <pod-name> -- /bin/bash
kubectl exec -it my-nginx -- /bin/bash

# Execute some commands in Nginx container
ls
cd /usr/share/nginx/html
cat index.html
exit


- **Running individual commands in a Container**
kubectl exec -it <pod-name> env

# Sample Commands
kubectl exec [POD] -- [COMMAND] instead
 kubectl exec my-nginx -- env
 kubectl exec my-nginx -- ls
 kubectl exec my-nginx --cat /usr/share/nginx/html/index.html

 ### Get YAML Output

# Get pod definition YAML output
kubectl get pod my-nginx -o yaml   

# Get service definition YAML output
kubectl get service my-nginx-svc -o yaml   

## Step-07: Clean-Up
```
# Get all Objects in default namespace
kubectl get all

# Delete Services
kubectl delete svc my-nginx-svc


# Delete Pod
kubectl delete pod my-nginx

# Get all Objects in default namespace
kubectl get all